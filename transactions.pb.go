// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transactions.proto

package datapace

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TransferData struct {
	StreamID             string   `protobuf:"bytes,1,opt,name=streamID" json:"streamID,omitempty"`
	From                 string   `protobuf:"bytes,2,opt,name=from" json:"from,omitempty"`
	To                   string   `protobuf:"bytes,3,opt,name=to" json:"to,omitempty"`
	Value                uint64   `protobuf:"varint,4,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransferData) Reset()         { *m = TransferData{} }
func (m *TransferData) String() string { return proto.CompactTextString(m) }
func (*TransferData) ProtoMessage()    {}
func (*TransferData) Descriptor() ([]byte, []int) {
	return fileDescriptor_transactions_ce0e7c522c60daef, []int{0}
}
func (m *TransferData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferData.Unmarshal(m, b)
}
func (m *TransferData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferData.Marshal(b, m, deterministic)
}
func (dst *TransferData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferData.Merge(dst, src)
}
func (m *TransferData) XXX_Size() int {
	return xxx_messageInfo_TransferData.Size(m)
}
func (m *TransferData) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferData.DiscardUnknown(m)
}

var xxx_messageInfo_TransferData proto.InternalMessageInfo

func (m *TransferData) GetStreamID() string {
	if m != nil {
		return m.StreamID
	}
	return ""
}

func (m *TransferData) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *TransferData) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *TransferData) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*TransferData)(nil), "datapace.TransferData")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TransactionsServiceClient is the client API for TransactionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransactionsServiceClient interface {
	CreateUser(ctx context.Context, in *ID, opts ...grpc.CallOption) (*empty.Empty, error)
	Transfer(ctx context.Context, in *TransferData, opts ...grpc.CallOption) (*empty.Empty, error)
}

type transactionsServiceClient struct {
	cc *grpc.ClientConn
}

func NewTransactionsServiceClient(cc *grpc.ClientConn) TransactionsServiceClient {
	return &transactionsServiceClient{cc}
}

func (c *transactionsServiceClient) CreateUser(ctx context.Context, in *ID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/datapace.TransactionsService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsServiceClient) Transfer(ctx context.Context, in *TransferData, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/datapace.TransactionsService/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionsServiceServer is the server API for TransactionsService service.
type TransactionsServiceServer interface {
	CreateUser(context.Context, *ID) (*empty.Empty, error)
	Transfer(context.Context, *TransferData) (*empty.Empty, error)
}

func RegisterTransactionsServiceServer(s *grpc.Server, srv TransactionsServiceServer) {
	s.RegisterService(&_TransactionsService_serviceDesc, srv)
}

func _TransactionsService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datapace.TransactionsService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServiceServer).CreateUser(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsService_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServiceServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datapace.TransactionsService/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServiceServer).Transfer(ctx, req.(*TransferData))
	}
	return interceptor(ctx, in, info, handler)
}

var _TransactionsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datapace.TransactionsService",
	HandlerType: (*TransactionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _TransactionsService_CreateUser_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _TransactionsService_Transfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transactions.proto",
}

func init() { proto.RegisterFile("transactions.proto", fileDescriptor_transactions_ce0e7c522c60daef) }

var fileDescriptor_transactions_ce0e7c522c60daef = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8f, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x4d, 0x8c, 0x12, 0x87, 0xe0, 0x61, 0x94, 0x12, 0xe2, 0xa5, 0xf4, 0xd4, 0xd3, 0x16,
	0xd4, 0xa3, 0x37, 0xe3, 0xa1, 0xd7, 0x5a, 0x1f, 0x60, 0x1a, 0x27, 0xa5, 0xd0, 0xcd, 0x94, 0xd9,
	0x69, 0xc1, 0x47, 0xf0, 0xad, 0xa5, 0x1b, 0xa2, 0xb9, 0x78, 0xdb, 0xff, 0x63, 0xff, 0xe1, 0xff,
	0x00, 0x4d, 0xa9, 0x0b, 0xd4, 0xd8, 0x4e, 0xba, 0xe0, 0x0e, 0x2a, 0x26, 0x98, 0x7b, 0xe9, 0xd8,
	0x28, 0x50, 0xf5, 0xb0, 0x15, 0xd9, 0xee, 0x79, 0x11, 0xf9, 0xe6, 0xd8, 0x2e, 0xd8, 0x1f, 0xec,
	0xab, 0xff, 0x56, 0x15, 0x8d, 0x78, 0x2f, 0x5d, 0x9f, 0x66, 0x9f, 0x50, 0xac, 0xcf, 0xa7, 0x5a,
	0xd6, 0x9a, 0x8c, 0xb0, 0x82, 0x3c, 0x98, 0x32, 0xf9, 0x65, 0x5d, 0x26, 0xd3, 0x64, 0x7e, 0xb3,
	0xfa, 0xcd, 0x88, 0x90, 0xb5, 0x2a, 0xbe, 0x4c, 0x23, 0x8f, 0x6f, 0xbc, 0x85, 0xd4, 0xa4, 0xbc,
	0x8c, 0x24, 0x35, 0xc1, 0x7b, 0xb8, 0x3a, 0xd1, 0xfe, 0xc8, 0x65, 0x36, 0x4d, 0xe6, 0xd9, 0xaa,
	0x0f, 0x8f, 0xdf, 0x09, 0xdc, 0xad, 0x47, 0x8b, 0xdf, 0x59, 0x4f, 0xbb, 0x86, 0xf1, 0x19, 0xe0,
	0x55, 0x99, 0x8c, 0x3f, 0x02, 0x2b, 0x16, 0x6e, 0x30, 0x70, 0xcb, 0xba, 0x9a, 0xb8, 0xde, 0xc2,
	0x0d, 0x16, 0xee, 0xed, 0x6c, 0x31, 0xbb, 0xc0, 0x17, 0xc8, 0x87, 0xcd, 0x38, 0xf9, 0xeb, 0x8c,
	0x3d, 0xfe, 0x6f, 0x6f, 0xae, 0x23, 0x79, 0xfa, 0x09, 0x00, 0x00, 0xff, 0xff, 0x50, 0xda, 0x8c,
	0x60, 0x43, 0x01, 0x00, 0x00,
}
