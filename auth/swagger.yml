swagger: "2.0"
info:
  title: Go Auth service
  description: HTTP API for authentication and authorization.
  version: "1.0.0"
consumes:
  - "application/json"
produces:
  - "application/json"
paths:
  /users:
    get:
      summary: List of all users
      description: Fetches list of all users registered on the system (requires admin role in auth token).
      tags:
        - users
      parameters:
        - $ref: "#/parameters/Authorization"
      responses:
        200:
          description: User data retrieved.
          schema:
            $ref: "#/definitions/UsersPage"
        403:
          description: Missing or invalid access token provided.
        404:
          description: User does not exist.
        500:
          $ref: "#/responses/ServiceError"
    post:
      summary: Create a user account
      description: |
        User creation is performed with values provided in a request payload.
      tags:
        - users
      parameters:
        - $ref: "#/parameters/Authorization"
        - name: user
          description: JSON-formatted document describing the new user.
          in: body
          schema:
            $ref: "#/definitions/UserRegister"
          required: true
      responses:
        201:
          description: User created.
        400:
          description: Failed due to malformed JSON.
        409:
          description: Email is already taken.
        500:
          $ref: "#/responses/ServiceError"
  /users/{id}:
    get:
      summary: Retrieves user info. User can retrieve info for it's own ID contained in token. Admin can retrieve infor for any ID.
      tags:
        - users
      parameters:
        - $ref: "#/parameters/Authorization"
        - name: id
          description: User ID.
          in: path
          type: string
          required: true
      responses:
        200:
          description: User data retrieved.
          schema:
            $ref: '#/definitions/UserRes'
        403:
          description: Missing or invalid access token provided.
        404:
          description: User does not exist.
        500:
          $ref: "#/responses/ServiceError"
    patch:
      summary: Updates user attributes for user id. User with Admin role can update any user attributes, while user without it can update only his attributes (but not roles). Update is performed by replacing the current resource data with values provided in a request payload. Resource's unique identifier (User id) will not be affected.
      tags:
        - users
      parameters:
        - $ref: "#/parameters/Authorization"
        - name: id
          description: User ID.
          in: path
          type: string
          required: true
        - name: user
          description: JSON-formatted document describing the updated user fields.
          in: body
          schema:
            $ref: "#/definitions/UserUpdate"
          required: true
      responses:
        200:
          description: User data updated.
        403:
          description: Missing or invalid access token provided.
        404:
          description: User does not exist.
        500:
          $ref: "#/responses/ServiceError"

  /users/non-partners:
    get:
      summary: List of non-partners
      description: List of users that are not potential nor actual partners.
      tags:
        - users
        - partners
      responses:
        200:
          description: User data retrieved.
        403:
          description: Missing or invalid access token provided.
        500:
          $ref: "#/responses/ServiceError"
  /users/recover:
    post:
      summary: User password reset request
      description: Initiate password request procedure. Generates a reset token and sends an email with link for resetting password.
      tags:
        - users
        - password recovery
      parameters:
        - name: email
          description: JSON-formatted email
          in: body
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
      responses:
        200:
          description: Sent email with link for reseting password.
        403:
          description: Missing or invalid email provided
        500:
          $ref: "#/responses/ServiceError"
  /users/recover/{token}/{id}:
    get:
      summary: Validate recovery token and user's ID
      description: Validates recovery token and user's ID
      tags:
        - users
        - password recovery
      parameters:
        - name: token
          description: Recovery token from reset email.
          in: path
          type: string
          required: true
        - name: id
          description: User ID.
          in: path
          type: string
          required: true
      responses:
        200:
          description: Token and user ID are valid
        400:
          description: Token validation failed
        404:
          description: User not found
        500:
          $ref: "#/responses/ServiceError"
    patch:
      summary: Update password
      description: When user gets reset token in email posting password to this endpoint will change password.
      tags:
        - users
        - password recovery
      parameters:
        - name: token
          description: Recovery token from reset email.
          in: path
          type: string
          required: true
        - name: id
          description: User ID.
          in: path
          type: string
          required: true
        - name: password
          description: JSON-formatted password
          in: body
          schema:
            type: object
            required:
              - password
            properties:
              password:
                type: string
      responses:
        200:
          description: Password succsesfully updated
        400:
          description: Token validation failed
        404:
          description: User not found
        500:
          $ref: "#/responses/ServiceError"
  /tokens:
    post:
      summary: User authentication
      description: |
        Generates an access token when provided with proper credentials.
      tags:
        - authentication
      parameters:
        - name: credentials
          description: JSON-formatted document containing user credentials.
          in: body
          schema:
            $ref: "#/definitions/Credentials"
          required: true
      responses:
        201:
          description: User authenticated.
          schema:
            $ref: "#/definitions/Token"
        400:
          description: |
            Failed due to malformed JSON or using an invalid credentials.
        500:
          $ref: "#/responses/ServiceError"
  /policies:
    post:
      summary: Create a new policy.
      description: |
        Creates a new policy.
      tags:
        - policies
      parameters:
        - $ref: "#/parameters/Authorization"
        - name: policy
          description: JSON-formatted document containing policy
          in: body
          schema:
            $ref: "#/definitions/Policy"
          required: true
      responses:
        201:
          description: Policy created successfully
          schema:
            $ref: "#/parameters/ID"
        400:
          description: |
            Failed due to malformed JSON or using an invalid credentials.
        500:
          $ref: "#/responses/ServiceError"
    get:
      summary: List policies owned by the user
      description: |
        Lists policies owned by the user identified using provided Authorization token.
      tags:
        - policies
      parameters:
        - $ref: "#/parameters/Authorization"
      responses:
        200:
          description: Policies retieved successfully.
          schema:
            $ref: "#/definitions/Policies"
        400:
          description: |
            Failed due to malformed JSON or using an invalid credentials.
        500:
          $ref: "#/responses/ServiceError"
  /policies/{id}:
    get:
      summary: Retrieve a policy by ID
      description: Retrieve policy with the provided ID owned by the user identified using provided Authorization token.
      tags:
        - policies
      parameters:
        - $ref: "#/parameters/Authorization"
        - name: id
          description: Policy ID.
          in: path
          type: string
          required: true
      responses:
        200:
          description: Policies retieved successfully.
          schema:
            $ref: "#/definitions/Policy"
        400:
          description: |
            Failed due to malformed JSON or using an invalid credentials.
        500:
          $ref: "#/responses/ServiceError"
    delete:
      summary: Remove a policy by ID
      description: Remove policy with the provided ID owned by the user identified using provided Authorization token.
      tags:
        - policies
      parameters:
        - $ref: "#/parameters/Authorization"
        - name: id
          description: Policy ID.
          in: path
          type: string
          required: true
      responses:
        204:
          description: Policy removed.
          schema:
            $ref: "#/definitions/Policy"
        500:
          $ref: "#/responses/ServiceError"
  /policies/{policy}/users/{user}:
    put:
      summary: Attach the policy to the user.
      description: Attach the policy with the provided ID to the user identified by the ID.
      tags:
        - policies
      parameters:
        - $ref: "#/parameters/Authorization"
        - name: policy
          description: Policy ID.
          in: path
          type: string
          required: true
        - name: user
          description: User ID.
          in: path
          type: string
          required: true
      responses:
        200:
          description: Policy attached successfully.
        500:
          $ref: "#/responses/ServiceError"
    delete:
      summary: Detach the policy from the user.
      description: Detach the policy with the provided ID to the user identified by the ID.
      tags:
        - policies
      parameters:
        - $ref: "#/parameters/Authorization"
        - name: policy
          description: Policy ID.
          in: path
          type: string
          required: true
        - name: user
          description: User ID.
          in: path
          type: string
          required: true
      responses:
        204:
          description: Policy detached successfully.
        500:
          $ref: "#/responses/ServiceError"
parameters:
  Authorization:
    name: Authorization
    description: User access token.
    in: header
    type: string
    required: true
  ID:
    name: Location
    description: URL location to of the created entity.
    in: header
    type: string
    required: true

responses:
  ServiceError:
    description: Unexpected server-side error ocurred.

definitions:
  UserRegister:
    type: object
    properties:
      email:
        type: string
        format: email
        example: "test@example.com"
        description: User's email address will be used as its unique identifier
      contact_email:
        type: string
        format: email
        example: "test@example.com"
      company:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      address:
        type: string
      country:
        type: string
      phone:
        type: string
      mobile:
        type: string
      role:
        type: string
      password:
        type: string
        format: password
        description: Free-form account password used for acquiring auth token(s).
      metadata:
        $ref: '#/definitions/Metadata'

  UserRes:
    type: object
    properties:
      id:
        type: string
        description: Unique stream identifier generated by the service.
      email:
        type: string
        format: email
        example: "test@example.com"
        description: User's email address will be used as its unique identifier
      contact_email:
        type: string
        format: email
        example: "test@example.com"
      company:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      address:
        type: string
      country:
        type: string
      phone:
        type: string
      mobile:
        type: string
      role:
        type: string
      password:
        type: string
        format: password
        description: Free-form account password used for acquiring auth token(s).
      disabled:
        type: boolean
        description: When set to true, prevents user from logging in.
      locked:
        type: boolean
        description: When set to true, prevents user from logging in.
      policies:
        type: array
        items:
          $ref: '#/definitions/Policies'
      wishlist:
        type: array
        items:
          type: string
        description: wishlist - array of stream IDs
      created_date:
        type: string
        format: date-time
        description: User's created date          
      metadata:
        $ref: '#/definitions/Metadata'

  UsersPage:
    type: object
    properties:
      users:
        type: array
        items:
          $ref: '#/definitions/UsersRes'

  UsersRes:
    type: object
    properties:
      id:
        type: string
        description: Unique stream identifier generated by the service.
      email:
        type: string
        format: email
        example: "test@example.com"
        description: User's email address will be used as its unique identifier
      contact_email:
        type: string
        format: email
        example: "test@example.com"
      company:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      address:
        type: string
      phone:
        type: string
      role:
        type: string
      password:
        type: string
        format: password
        description: Free-form account password used for acquiring auth token(s).
      disabled:
        type: boolean
        description: When set to true, prevents user from logging in.
      locked:
        type: boolean
        description: When set to true, prevents user from logging in.
      policies:
        type: array
        items:
          $ref: '#/definitions/Policies'
      wishlist:
        type: array
        items:
          type: string
        description: wishlist - array of stream IDs
      created_date:
        type: string
        format: date-time
        description: User's created date        
      metadata:
        $ref: '#/definitions/Metadata'

  UserUpdate:
    type: object
    properties:
      email:
        type: string
        format: email
        example: "test@example.com"
        description: User's email address will be used as its unique identifier
      contact_email:
        type: string
        format: email
        example: "test@example.com"
      company:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      address:
        type: string
      country:
        type: string
      phone:
        type: string
      mobile:
        type: string
      role:
        type: string
      password:
        type: string
        format: password
        description: Free-form account password used for acquiring auth token(s).
      disabled:
        type: boolean
        description: When set to true, prevents user from logging in.
      locked:
        type: boolean
        description: When set to true, prevents user from logging in.
      wishlist:
        type: array
        items:
          type: string
        description: wishlist - array of stream IDs
        example:
          wishlist: [5bf142459b72e12b2b1b2cd, 5bf142459b72e12b2b1b2d0]
      metadata:
        $ref: '#/definitions/Metadata'
    required:
      - email
      - password

  Metadata:
    type: object
    description: Metadata constraint
    properties:
      url:
        type: string
        format: URL
        description: user's website
      logo:
        type: string
        format: URL
        description: user's profile picture or logo
      description:
        type: string
        description: more info about user
    example: #sample metadata
      url: http://example.com
      logo: https://freesvg.org/img/nicubunu_Dog_head_1.png
      description: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.

  Credentials:
    type: object
    properties:
      email:
        type: string
        format: email
        example: "test@example.com"
        description: User's email address will be used as its unique identifier
      password:
        type: string
        format: password
        description: Free-form account password used for acquiring auth token(s).
    required:
      - email
      - password
  Token:
    type: object
    properties:
      token:
        type: string
        description: Generated access token.
    required:
      - token
  Rule:
    type: object
    description: Policy rule
    properties:
      action:
        type: integer
        enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        description: |
          Each enum value represemts one of the possible values [Any, Create, CreateBulk, Read, Update, Delete, Write, List, Buy, Withdraw, Sign]
      type:
        type: string
        description: Represnts the entity the rule aplies to. For example, a Stream.
      condition:
        type: object
        properties:
          key:
            type: string
            description: An object key to be matched when evaluating key.
          value:
            type: string
            description: Expected value of the matched key.
  Policy:
    type: object
    properties:
      version:
        type: string
        description: Version of the policy
      name:
        type: string
        description: Unique name of the policy
      rules:
        type: array
        items:
          $ref: '#/definitions/Rule'
  Policies:
    type: array
    items:
      $ref: '#/definitions/Policy'
