swagger: "2.0"
info:
  title: Go Auth service
  description: HTTP API for authentication and authorization.
  version: "1.0.0"
consumes:
  - "application/json"
produces:
  - "application/json"
paths:
  /users:
    get:
      summary: Retrieves user info
      tags:
        - users
      parameters:
        - $ref: "#/parameters/Authorization"
      responses:
        200:
          description: User data retrieved.
        403:
          description: Missing or invalid access token provided.
        404:
          description: User does not exist.
        500:
          $ref: "#/responses/ServiceError"
    post:
      summary: Create a user account
      description: |
        User creation is performed with values provided in a request payload.
      tags:
        - users
      parameters:
        - $ref: "#/parameters/Authorization"
        - name: user
          description: JSON-formatted document describing the new user.
          in: body
          schema:
            $ref: "#/definitions/User"
          required: true
      responses:
        201:
          description: User created.
        400:
          description: Failed due to malformed JSON.
        409:
          description: Email is already taken.
        500:
          $ref: "#/responses/ServiceError"
    put:
      summary: Updates user info
      description: |
        Update is performed by replacing the current resource data with values
        provided in a request payload. Resource's unique identifier will not be
        affected.
      tags:
        - users
      parameters:
        - name: user
          description: JSON-formatted document describing the new user.
          in: body
          schema:
            $ref: "#/definitions/User"
          required: true
      responses:
        200:
          description: User updated.
        400:
          description: Failed due to malformed JSON.
        403:
          description: Missing or invalid access token provided.
        404:
          description: User does not exist.
        500:
          $ref: "#/responses/ServiceError"
  /users/all:
    get:
      summary: List of all users
      description: Fetches list of all users registered on the system.
      tags:
        - users
      responses:
        200:
          description: User data retrieved.
        403:
          description: Missing or invalid access token provided.
        500:
          $ref: "#/responses/ServiceError"
  /users/non-partners:
    get:
      summary: List of non-partners
      description: List of users that are not potential nor actual partners.
      tags:
        - users
        - partners
      responses:
        200:
          description: User data retrieved.
        403:
          description: Missing or invalid access token provided.
        500:
          $ref: "#/responses/ServiceError"
  /tokens:
    post:
      summary: User authentication
      description: |
        Generates an access token when provided with proper credentials.
      tags:
        - authentication
      parameters:
        - name: credentials
          description: JSON-formatted document containing user credentials.
          in: body
          schema:
            $ref: "#/definitions/User"
          required: true
      responses:
        201:
          description: User authenticated.
          schema:
            $ref: "#/definitions/Token"
        400:
          description: |
            Failed due to malformed JSON or using an invalid credentials.
        500:
          $ref: "#/responses/ServiceError"

parameters:
  Authorization:
    name: Authorization
    description: User access token.
    in: header
    type: string
    required: true

responses:
  ServiceError:
    description: Unexpected server-side error occured.

definitions:
  User:
    type: object
    properties:
      email:
        type: string
        format: email
        example: "test@example.com"
        description: User's email address will be used as its unique identifier
      password:
        type: string
        format: password
        description: Free-form account password used for acquiring auth token(s).
      roles:
        type: array
          items:
            type: string
        description: An array of roles that user can have. admin role is most significant
    required:
      - email
      - password
  Token:
    type: object
    properties:
      token:
        type: string
        description: Generated access token.
    required:
      - token
