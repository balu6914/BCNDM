{{- range $i, $org := .Values.PeerOrgs }}

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: hlf-ca--{{ $org.Name | lower }}
spec:
  replicas: 1
  podManagementPolicy: Parallel
  serviceName: hlf-ca--{{ $org.Name | lower }}
  selector:
    matchLabels:
      app: hlf-ca--{{ $org.Name | lower }}
  volumeClaimTemplates:
  {{- if $.Values.certAuthority.persistence.enabled }}
  - metadata:
      name: ca-disk
    spec:
      accessModes:
        - ReadWriteOnce
      storageClassName: {{ $.Values.persistence.storageClass }}
      resources:
        requests:
          storage: {{ $.Values.certAuthority.persistence.size }}
  {{- end }}
  template:
    metadata:
      labels:
        app: hlf-ca--{{ $org.Name | lower }}
    spec:
      volumes:
      - name: ca-tls
        secret:
          secretName: hlf-ca--{{ $org.Name | lower }}-tls
      - name: rsync-disk
        emptyDir: {}
      {{- if not $.Values.orderer.persistence.enabled }}
      - name: ca-disk
        emptyDir: {}
      {{- end }}
      
      {{- if $.Values.backup.enabled }}
      containers:
      # rsync-server container
      - name: rsync
        image: axiom/rsync-server:latest
        command: ["sh", "-c", "mkdir -p /data && sleep 30 && \
          {{- if $.Values.certAuthority.backup.enabled }}
                               tar -czf /data/ca.tar -C /etc/hyperledger/fabric-ca-server/ --exclude='lost+found' .  && \
                               echo 'prepared ca data for backup' && \
          {{- end }}
                               touch /ready && \
                               /entrypoint.sh rsync_server"]

        readinessProbe:
          exec:
            command: ["ls", "/ready"]

        volumeMounts:
        - mountPath: /etc/hyperledger/
          name: ca-disk

        env:
        - name: ALLOW
          value: 0.0.0.0/0

      {{- else if $.Values.restore.enabled }}
      containers:
      # rsync-server container
      - name: rsync
        image: axiom/rsync-server:latest
        command: ["sh", "-c", "/entrypoint.sh rsync_server"]

        volumeMounts:
        - mountPath: /data/
          name: rsync-disk

        env:
        - name: ALLOW
          value: 0.0.0.0/0

      - name: shell
        image: debian:jessie
        command: ["sh", "-c", "echo 'waiting for file /data/ready..' && \
                               while [ ! -f /data/ready ]; do sleep 5; done && \
                               echo 'data is ready, proceeding..' && \
          {{- if $.Values.certAuthority.restore.enabled }}
                               mkdir -p /etc/hyperledger/fabric-ca-server/ && \
                               tar -xf /data/ca.tar -C /etc/hyperledger/fabric-ca-server/ && \
                               echo 'restored ca data from backup' && \
          {{- end }}
                               echo 'ready to continue..' && \
                               while true; do sleep 60; done"]

        volumeMounts:
        - mountPath: /etc/hyperledger/
          name: ca-disk
          subPath: fabric-ca-server
        - mountPath: /data/
          name: rsync-disk

      {{- else }}
      containers:
      - name: ca
        {{- if $.Values.hyperledger.registry }}
        image: {{ $.Values.hyperledger.registry }}/fabric-ca:{{ $.Values.hyperledger.version.ca }}
        {{- else }}
        image: hyperledger/fabric-ca:{{ $.Values.hyperledger.version.ca }}
        {{- end }}
        command: ["sh", "-c", "fabric-ca-server start \
            --ca.certfile /etc/hyperledger/fabric-ca-server-config/cert.pem \
            --ca.keyfile /etc/hyperledger/fabric-ca-server-config/private_key \
            -b {{ $.Values.ca.userName }}:{{ $.Values.ca.password }} -d"]

        volumeMounts:
        - mountPath: /etc/hyperledger/fabric-ca-server-config/
          name: ca-tls
        - mountPath: /etc/hyperledger
          name: ca-disk
          subPath: fabric-ca-server

        env:
        # TODO move configurable ones to configmaps
        - name: FABRIC_LOGGING_SPEC
          value: {{ $.Values.ca.logLevel }}
        - name: FABRIC_CA_HOME
          value: /etc/hyperledger/fabric-ca-server
        - name: FABRIC_CA_SERVER_CA_NAME
          value: ca.{{ $org.Domain }}
        - name: FABRIC_CA_SERVER_TLS_ENABLED
          value: "false" # it's always false as we use Ingress for TLS termination. # {{ $.Values.tlsEnabled | quote }}
        - name: FABRIC_CA_SERVER_TLS_CERTFILE
          value: /etc/hyperledger/fabric-ca-server-config/cert.pem
        - name: FABRIC_CA_SERVER_TLS_KEYFILE
          value: /etc/hyperledger/fabric-ca-server-config/private_key
      {{- end }}
---
{{- end }} {{- /* Orgs */ -}}
