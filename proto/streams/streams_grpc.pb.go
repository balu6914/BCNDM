// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package streams

import (
	context "context"
	common "github.com/datapace/datapace/proto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StreamsServiceClient is the client API for StreamsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamsServiceClient interface {
	One(ctx context.Context, in *common.ID, opts ...grpc.CallOption) (*Stream, error)
}

type streamsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamsServiceClient(cc grpc.ClientConnInterface) StreamsServiceClient {
	return &streamsServiceClient{cc}
}

func (c *streamsServiceClient) One(ctx context.Context, in *common.ID, opts ...grpc.CallOption) (*Stream, error) {
	out := new(Stream)
	err := c.cc.Invoke(ctx, "/datapace.StreamsService/One", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamsServiceServer is the server API for StreamsService service.
// All implementations must embed UnimplementedStreamsServiceServer
// for forward compatibility
type StreamsServiceServer interface {
	One(context.Context, *common.ID) (*Stream, error)
	mustEmbedUnimplementedStreamsServiceServer()
}

// UnimplementedStreamsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStreamsServiceServer struct {
}

func (*UnimplementedStreamsServiceServer) One(context.Context, *common.ID) (*Stream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method One not implemented")
}
func (*UnimplementedStreamsServiceServer) mustEmbedUnimplementedStreamsServiceServer() {}

func RegisterStreamsServiceServer(s *grpc.Server, srv StreamsServiceServer) {
	s.RegisterService(&_StreamsService_serviceDesc, srv)
}

func _StreamsService_One_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).One(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datapace.StreamsService/One",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).One(ctx, req.(*common.ID))
	}
	return interceptor(ctx, in, info, handler)
}

var _StreamsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datapace.StreamsService",
	HandlerType: (*StreamsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "One",
			Handler:    _StreamsService_One_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/streams.proto",
}
