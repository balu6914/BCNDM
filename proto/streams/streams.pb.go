// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/streams.proto

package streams

import (
	reflect "reflect"
	sync "sync"
	"time"

	common "github.com/datapace/datapace/proto/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Owner      string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Url        string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Price      uint64 `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`
	External   bool   `protobuf:"varint,6,opt,name=external,proto3" json:"external,omitempty"`
	Project    string `protobuf:"bytes,7,opt,name=project,proto3" json:"project,omitempty"`
	Dataset    string `protobuf:"bytes,8,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Table      string `protobuf:"bytes,9,opt,name=table,proto3" json:"table,omitempty"`
	Fields     string `protobuf:"bytes,10,opt,name=fields,proto3" json:"fields,omitempty"`
	Visibility string `protobuf:"bytes,11,opt,name=visibility,proto3" json:"visibility,omitempty"`
	AccessType string `protobuf:"bytes,12,opt,name=accessType,proto3" json:"accessType,omitempty"`
	EndDate *time.Time `protobuf:"bytes,13,opt,name=endDate,proto3" json:"endDate,omitempty"`
}

func (m *Stream) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Stream.Unmarshal(m, b)
}
func (m *Stream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Stream.Marshal(b, m, deterministic)
}
func (m *Stream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stream.Merge(m, src)
}
func (m *Stream) XXX_Size() int {
	return xxx_messageInfo_Stream.Size(m)
}
func (m *Stream) XXX_DiscardUnknown() {
	xxx_messageInfo_Stream.DiscardUnknown(m)
}

var xxx_messageInfo_Stream proto.InternalMessageInfo

func (m *Stream) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Stream) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Stream) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Stream) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Stream) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Stream) GetExternal() bool {
	if m != nil {
		return m.External
	}
	return false
}

func (m *Stream) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *Stream) GetDataset() string {
	if m != nil {
		return m.Dataset
	}
	return ""
}

func (m *Stream) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *Stream) GetFields() string {
	if m != nil {
		return m.Fields
	}
	return ""
}

func (m *Stream) GetVisibility() string {
	if m != nil {
		return m.Visibility
	}
	return ""
}

func (m *Stream) GetAccessType() string {
	if m != nil {
		return m.AccessType
	}
	return ""
}

func (x *Stream) GetEndDate() *time.Time {
	if x != nil {
		return x.EndDate
	}
	return nil
}

var File_proto_streams_proto protoreflect.FileDescriptor

var file_proto_streams_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x64, 0x61, 0x74, 0x61, 0x70, 0x61, 0x63, 0x65, 0x1a,
	0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x32, 0x39,
	0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x27, 0x0a, 0x03, 0x4f, 0x6e, 0x65, 0x12, 0x0c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x61,
	0x63, 0x65, 0x2e, 0x49, 0x44, 0x1a, 0x10, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x61, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x00, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x61, 0x63, 0x65,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_streams_proto_rawDescOnce sync.Once
	file_proto_streams_proto_rawDescData = file_proto_streams_proto_rawDesc
)

func file_proto_streams_proto_rawDescGZIP() []byte {
	file_proto_streams_proto_rawDescOnce.Do(func() {
		file_proto_streams_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_streams_proto_rawDescData)
	})
	return file_proto_streams_proto_rawDescData
}

func (m *Stream) GetMaxUnit() string {
	if m != nil {
		return m.MaxUnit
	}
	return ""
}

func init() {
	proto.RegisterType((*Stream)(nil), "datapace.Stream")
}

func init() {
	proto.RegisterFile("proto/streams.proto", fileDescriptor_2e15874c68ed9a82)
}

var fileDescriptor_2e15874c68ed9a82 = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0x3d, 0x4f, 0xc3, 0x30,
	0x10, 0x86, 0x49, 0xda, 0xa6, 0xe9, 0x51, 0xaa, 0xca, 0x20, 0x74, 0xea, 0x80, 0xaa, 0x2e, 0x54,
	0x08, 0xa5, 0x12, 0x4c, 0xac, 0xc0, 0xc2, 0x84, 0xd4, 0xc2, 0xc2, 0xe6, 0x24, 0x07, 0x18, 0xc5,
	0x71, 0x64, 0xbb, 0xa5, 0xfd, 0xb3, 0xfc, 0x16, 0x64, 0xbb, 0x1f, 0xb0, 0xdd, 0xf3, 0x3e, 0xa7,
	0xe4, 0xb5, 0x0d, 0xa7, 0x8d, 0x56, 0x56, 0xcd, 0x8c, 0xd5, 0xc4, 0xa5, 0xc9, 0x3c, 0xb1, 0xb4,
	0xe4, 0x96, 0x37, 0xbc, 0xa0, 0x11, 0x0b, 0xba, 0x50, 0x52, 0xaa, 0x3a, 0xd8, 0xc9, 0x4f, 0x0c,
	0xc9, 0xc2, 0xef, 0xb3, 0x01, 0xc4, 0xa2, 0xc4, 0x68, 0x1c, 0x4d, 0x7b, 0xf3, 0x58, 0x94, 0x8c,
	0x41, 0xbb, 0xe6, 0x92, 0x30, 0xf6, 0x89, 0x9f, 0xd9, 0x19, 0x74, 0xd4, 0x77, 0x4d, 0x1a, 0x5b,
	0x3e, 0x0c, 0xc0, 0x86, 0xd0, 0x5a, 0xea, 0x0a, 0xdb, 0x3e, 0x73, 0xa3, 0xdb, 0x6b, 0xb4, 0x28,
	0x08, 0x3b, 0xe3, 0x68, 0xda, 0x9e, 0x07, 0x60, 0x23, 0x48, 0x69, 0x6d, 0x49, 0xd7, 0xbc, 0xc2,
	0x64, 0x1c, 0x4d, 0xd3, 0xf9, 0x9e, 0x19, 0x42, 0xb7, 0xd1, 0xea, 0x8b, 0x0a, 0x8b, 0x5d, 0xff,
	0x9d, 0x1d, 0x3a, 0xe3, 0x8e, 0x60, 0xc8, 0x62, 0x1a, 0xcc, 0x16, 0xdd, 0x5f, 0x2c, 0xcf, 0x2b,
	0xc2, 0x5e, 0x68, 0xe3, 0x81, 0x9d, 0x43, 0xf2, 0x2e, 0xa8, 0x2a, 0x0d, 0x82, 0x8f, 0xb7, 0xc4,
	0x2e, 0x00, 0x56, 0xc2, 0x88, 0x5c, 0x54, 0xc2, 0x6e, 0xf0, 0xd8, 0xbb, 0x3f, 0x89, 0xf3, 0xbc,
	0x28, 0xc8, 0x98, 0x97, 0x4d, 0x43, 0xd8, 0x0f, 0xfe, 0x90, 0xb8, 0xf6, 0x92, 0xaf, 0x1f, 0x78,
	0x55, 0x19, 0x3c, 0xf1, 0xc7, 0xda, 0xb3, 0xeb, 0x28, 0xf9, 0xfa, 0xb5, 0x16, 0x16, 0x07, 0xa1,
	0xe3, 0x16, 0x6f, 0xee, 0x60, 0x10, 0xee, 0xd7, 0x2c, 0x48, 0xaf, 0xdc, 0x2d, 0x5c, 0x42, 0xeb,
	0xb9, 0x26, 0xd6, 0xcf, 0x76, 0x0f, 0x93, 0x3d, 0x3d, 0x8e, 0x86, 0x07, 0x0a, 0xeb, 0x93, 0xa3,
	0xfb, 0xeb, 0xb7, 0xab, 0x0f, 0x61, 0x3f, 0x97, 0x79, 0x56, 0x28, 0x39, 0xdb, 0xf9, 0xc3, 0xf0,
	0xef, 0xb5, 0xf3, 0xc4, 0xe3, 0xed, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x57, 0x9e, 0x53,
	0x05, 0x02, 0x00, 0x00,
}
