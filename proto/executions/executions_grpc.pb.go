// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: proto/executions.proto

package executions

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExecutionsServiceClient is the client API for ExecutionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExecutionsServiceClient interface {
	CreateAlgorithm(ctx context.Context, in *Algorithm, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateDataset(ctx context.Context, in *Dataset, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type executionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExecutionsServiceClient(cc grpc.ClientConnInterface) ExecutionsServiceClient {
	return &executionsServiceClient{cc}
}

func (c *executionsServiceClient) CreateAlgorithm(ctx context.Context, in *Algorithm, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/datapace.ExecutionsService/CreateAlgorithm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionsServiceClient) CreateDataset(ctx context.Context, in *Dataset, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/datapace.ExecutionsService/CreateDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecutionsServiceServer is the server API for ExecutionsService service.
// All implementations must embed UnimplementedExecutionsServiceServer
// for forward compatibility
type ExecutionsServiceServer interface {
	CreateAlgorithm(context.Context, *Algorithm) (*emptypb.Empty, error)
	CreateDataset(context.Context, *Dataset) (*emptypb.Empty, error)
	mustEmbedUnimplementedExecutionsServiceServer()
}

// UnimplementedExecutionsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExecutionsServiceServer struct {
}

func (UnimplementedExecutionsServiceServer) CreateAlgorithm(context.Context, *Algorithm) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlgorithm not implemented")
}
func (UnimplementedExecutionsServiceServer) CreateDataset(context.Context, *Dataset) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataset not implemented")
}
func (UnimplementedExecutionsServiceServer) mustEmbedUnimplementedExecutionsServiceServer() {}

// UnsafeExecutionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecutionsServiceServer will
// result in compilation errors.
type UnsafeExecutionsServiceServer interface {
	mustEmbedUnimplementedExecutionsServiceServer()
}

func RegisterExecutionsServiceServer(s grpc.ServiceRegistrar, srv ExecutionsServiceServer) {
	s.RegisterService(&ExecutionsService_ServiceDesc, srv)
}

func _ExecutionsService_CreateAlgorithm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Algorithm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionsServiceServer).CreateAlgorithm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datapace.ExecutionsService/CreateAlgorithm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionsServiceServer).CreateAlgorithm(ctx, req.(*Algorithm))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionsService_CreateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dataset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionsServiceServer).CreateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datapace.ExecutionsService/CreateDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionsServiceServer).CreateDataset(ctx, req.(*Dataset))
	}
	return interceptor(ctx, in, info, handler)
}

// ExecutionsService_ServiceDesc is the grpc.ServiceDesc for ExecutionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExecutionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datapace.ExecutionsService",
	HandlerType: (*ExecutionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAlgorithm",
			Handler:    _ExecutionsService_CreateAlgorithm_Handler,
		},
		{
			MethodName: "CreateDataset",
			Handler:    _ExecutionsService_CreateDataset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/executions.proto",
}
