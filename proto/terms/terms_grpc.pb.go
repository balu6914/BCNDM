// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package terms

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TermsServiceClient is the client API for TermsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TermsServiceClient interface {
	CreateTerms(ctx context.Context, in *Terms, opts ...grpc.CallOption) (*empty.Empty, error)
}

type termsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTermsServiceClient(cc grpc.ClientConnInterface) TermsServiceClient {
	return &termsServiceClient{cc}
}

func (c *termsServiceClient) CreateTerms(ctx context.Context, in *Terms, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/datapace.TermsService/CreateTerms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TermsServiceServer is the server API for TermsService service.
// All implementations must embed UnimplementedTermsServiceServer
// for forward compatibility
type TermsServiceServer interface {
	CreateTerms(context.Context, *Terms) (*empty.Empty, error)
	mustEmbedUnimplementedTermsServiceServer()
}

// UnimplementedTermsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTermsServiceServer struct {
}

func (*UnimplementedTermsServiceServer) CreateTerms(context.Context, *Terms) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTerms not implemented")
}
func (*UnimplementedTermsServiceServer) mustEmbedUnimplementedTermsServiceServer() {}

func RegisterTermsServiceServer(s *grpc.Server, srv TermsServiceServer) {
	s.RegisterService(&_TermsService_serviceDesc, srv)
}

func _TermsService_CreateTerms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Terms)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TermsServiceServer).CreateTerms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datapace.TermsService/CreateTerms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TermsServiceServer).CreateTerms(ctx, req.(*Terms))
	}
	return interceptor(ctx, in, info, handler)
}

var _TermsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datapace.TermsService",
	HandlerType: (*TermsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTerms",
			Handler:    _TermsService_CreateTerms_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/terms.proto",
}
