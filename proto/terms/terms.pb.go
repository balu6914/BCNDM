// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/terms.proto

package terms

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Terms struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StreamId             string   `protobuf:"bytes,2,opt,name=streamId,proto3" json:"streamId,omitempty"`
	Url                  string   `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Hash                 string   `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Terms) Reset()         { *m = Terms{} }
func (m *Terms) String() string { return proto.CompactTextString(m) }
func (*Terms) ProtoMessage()    {}
func (*Terms) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c971b56afd237b5, []int{0}
}

func (m *Terms) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Terms.Unmarshal(m, b)
}
func (m *Terms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Terms.Marshal(b, m, deterministic)
}
func (m *Terms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Terms.Merge(m, src)
}
func (m *Terms) XXX_Size() int {
	return xxx_messageInfo_Terms.Size(m)
}
func (m *Terms) XXX_DiscardUnknown() {
	xxx_messageInfo_Terms.DiscardUnknown(m)
}

var xxx_messageInfo_Terms proto.InternalMessageInfo

func (m *Terms) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Terms) GetStreamId() string {
	if m != nil {
		return m.StreamId
	}
	return ""
}

func (m *Terms) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Terms) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func init() {
	proto.RegisterType((*Terms)(nil), "datapace.Terms")
}

func init() {
	proto.RegisterFile("proto/terms.proto", fileDescriptor_9c971b56afd237b5)
}

var fileDescriptor_9c971b56afd237b5 = []byte{
	// 209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x49, 0x2d, 0xca, 0x2d, 0xd6, 0x03, 0xb3, 0x85, 0x38, 0x52, 0x12, 0x4b, 0x12,
	0x0b, 0x12, 0x93, 0x53, 0xa5, 0xa4, 0xd3, 0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5, 0xc1, 0xe2, 0x49,
	0xa5, 0x69, 0xfa, 0xa9, 0xb9, 0x05, 0x25, 0x95, 0x10, 0x65, 0x4a, 0x91, 0x5c, 0xac, 0x21, 0x20,
	0x5d, 0x42, 0x7c, 0x5c, 0x4c, 0x99, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x40, 0x96,
	0x90, 0x14, 0x17, 0x47, 0x71, 0x49, 0x51, 0x6a, 0x62, 0xae, 0x67, 0x8a, 0x04, 0x13, 0x58, 0x14,
	0xce, 0x17, 0x12, 0xe0, 0x62, 0x2e, 0x2d, 0xca, 0x91, 0x60, 0x06, 0x0b, 0x83, 0x98, 0x42, 0x42,
	0x5c, 0x2c, 0x19, 0x89, 0xc5, 0x19, 0x12, 0x2c, 0x60, 0x21, 0x30, 0xdb, 0xc8, 0x83, 0x8b, 0x07,
	0x6c, 0x74, 0x70, 0x6a, 0x51, 0x59, 0x66, 0x72, 0xaa, 0x90, 0x05, 0x17, 0xb7, 0x33, 0xd0, 0x80,
	0x92, 0x54, 0x88, 0x85, 0xfc, 0x7a, 0x30, 0x17, 0xea, 0x81, 0x05, 0xa4, 0xc4, 0xf4, 0x20, 0x0e,
	0xd5, 0x83, 0x39, 0x54, 0xcf, 0x15, 0xe4, 0x50, 0x25, 0x06, 0x27, 0xad, 0x28, 0x8d, 0xf4, 0xcc,
	0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0x7d, 0x98, 0x36, 0x04, 0x03, 0xc9, 0xf7, 0x49,
	0x6c, 0x60, 0x8e, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x53, 0xff, 0xf1, 0xe8, 0x13, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TermsServiceClient is the client API for TermsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TermsServiceClient interface {
	CreateTerms(ctx context.Context, in *Terms, opts ...grpc.CallOption) (*empty.Empty, error)
}

type termsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTermsServiceClient(cc grpc.ClientConnInterface) TermsServiceClient {
	return &termsServiceClient{cc}
}

func (c *termsServiceClient) CreateTerms(ctx context.Context, in *Terms, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/datapace.TermsService/CreateTerms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TermsServiceServer is the server API for TermsService service.
type TermsServiceServer interface {
	CreateTerms(context.Context, *Terms) (*empty.Empty, error)
}

// UnimplementedTermsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTermsServiceServer struct {
}

func (*UnimplementedTermsServiceServer) CreateTerms(ctx context.Context, req *Terms) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTerms not implemented")
}

func RegisterTermsServiceServer(s *grpc.Server, srv TermsServiceServer) {
	s.RegisterService(&_TermsService_serviceDesc, srv)
}

func _TermsService_CreateTerms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Terms)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TermsServiceServer).CreateTerms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datapace.TermsService/CreateTerms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TermsServiceServer).CreateTerms(ctx, req.(*Terms))
	}
	return interceptor(ctx, in, info, handler)
}

var _TermsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datapace.TermsService",
	HandlerType: (*TermsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTerms",
			Handler:    _TermsService_CreateTerms_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/terms.proto",
}
